{"ast":null,"code":"var _jsxFileName = \"C:\\\\technical-test-react\\\\upstart-web\\\\src\\\\Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ForecastCard from './components/ForecastCard';\nimport GetForecastList from './services/ForecastService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Forecast() {\n  _s();\n\n  const [forecastResponse, setforecastResponse] = useState();\n  const [error, setError] = useState();\n  const streetRef = useRef();\n  const cityRef = useRef();\n  const stateRef = useRef();\n  const zipcodeRef = useRef();\n  useEffect(() => {//setForecastList using axios \n  }, []);\n\n  function handleOnClick() {\n    const street = streetRef.current.value;\n    const city = cityRef.current.value;\n    const state = stateRef.current.value;\n    const zipcode = zipcodeRef.current.value;\n    console.log(city);\n    GetForecastList(street, city, state, zipcode, forecastResponse, setError);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: streetRef,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: cityRef,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: stateRef,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: zipcodeRef,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOnClick,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), forecastResponse.periods.map((forecast, index) => {\n      return /*#__PURE__*/_jsxDEV(ForecastCard, {\n        forecast: forecast\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true);\n}\n\n_s(Forecast, \"RuvEbj6n2GPPjS4neUeZ2PmAl3k=\");\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["C:/technical-test-react/upstart-web/src/Forecast.js"],"names":["React","useState","useRef","useEffect","ForecastCard","GetForecastList","Forecast","forecastResponse","setforecastResponse","error","setError","streetRef","cityRef","stateRef","zipcodeRef","handleOnClick","street","current","value","city","state","zipcode","console","log","periods","map","forecast","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,EAAxD;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,EAAlC;AAEA,QAAMU,SAAS,GAAGT,MAAM,EAAxB;AACA,QAAMU,OAAO,GAAGV,MAAM,EAAtB;AACA,QAAMW,QAAQ,GAAGX,MAAM,EAAvB;AACA,QAAMY,UAAU,GAAGZ,MAAM,EAAzB;AAGAC,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASY,aAAT,GAAwB;AACtB,UAAMC,MAAM,GAAGL,SAAS,CAACM,OAAV,CAAkBC,KAAjC;AACA,UAAMC,IAAI,GAAGP,OAAO,CAACK,OAAR,CAAgBC,KAA7B;AACA,UAAME,KAAK,GAAGP,QAAQ,CAACI,OAAT,CAAiBC,KAA/B;AACA,UAAMG,OAAO,GAAGP,UAAU,CAACG,OAAX,CAAmBC,KAAnC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEAd,IAAAA,eAAe,CAACW,MAAD,EAASG,IAAT,EAAeC,KAAf,EAAsBC,OAAtB,EAA+Bd,gBAA/B,EAAiDG,QAAjD,CAAf;AACD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,GAAG,EAAEC,SAAZ;AAAuB,MAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAO,MAAA,GAAG,EAAEC,OAAZ;AAAqB,MAAA,IAAI,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAO,MAAA,GAAG,EAAEC,QAAZ;AAAsB,MAAA,IAAI,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAO,MAAA,GAAG,EAAEC,UAAZ;AAAwB,MAAA,IAAI,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAQ,MAAA,OAAO,EAAEC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,EAQGR,gBAAgB,CAACiB,OAAjB,CAAyBC,GAAzB,CAA6B,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACjD,0BAAO,QAAC,YAAD;AAA0B,QAAA,QAAQ,EAAED;AAApC,SAAmBC,KAAnB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA,CARH;AAAA,kBADF;AAeD;;GAvCuBrB,Q;;KAAAA,Q","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport ForecastCard from './components/ForecastCard';\r\nimport GetForecastList from './services/ForecastService'\r\n\r\nexport default function Forecast() {\r\n  const [forecastResponse, setforecastResponse] = useState();\r\n  const [error, setError] = useState()\r\n  \r\n  const streetRef = useRef()\r\n  const cityRef = useRef()\r\n  const stateRef = useRef()\r\n  const zipcodeRef = useRef()\r\n  \r\n\r\n  useEffect(() => {\r\n    //setForecastList using axios \r\n  }, [])\r\n\r\n  function handleOnClick(){\r\n    const street = streetRef.current.value;\r\n    const city = cityRef.current.value;\r\n    const state = stateRef.current.value;\r\n    const zipcode = zipcodeRef.current.value;\r\n    console.log(city);\r\n\r\n    GetForecastList(street, city, state, zipcode, forecastResponse, setError)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>Forecast</div>\r\n      <input ref={streetRef} type=\"text\" />\r\n      <input ref={cityRef} type=\"text\" />\r\n      <input ref={stateRef} type=\"text\" />\r\n      <input ref={zipcodeRef} type=\"text\" />\r\n      <button onClick={handleOnClick}>Search</button>\r\n\r\n      {forecastResponse.periods.map((forecast, index) => {\r\n        return <ForecastCard key={index} forecast={forecast} />;\r\n      })}\r\n\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}