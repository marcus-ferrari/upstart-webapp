{"ast":null,"code":"var _jsxFileName = \"C:\\\\technical-test-react\\\\upstart-web\\\\src\\\\Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport ForecastCard from \"./components/ForecastCard\";\nimport GetForecastList from \"./services/ForecastService\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport './css/forecast-form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Forecast() {\n  _s();\n\n  const [forecastResponse, setforecastResponse] = useState({\n    generatedAt: \"2022-03-15T02:33:12-03:00\",\n    periods: [{\n      startTime: \"2022-03-15T02:00:00-03:00\",\n      endTime: \"2022-03-15T07:00:00-03:00\",\n      isDaytime: false,\n      temperature: \"40째F\",\n      temperatureTrend: null,\n      windSpeed: \"7 mph\",\n      windDirection: \"SW\",\n      icon: \"https://api.weather.gov/icons/land/night/skc?size=medium\",\n      shortForecast: \"Clear\",\n      detailedForecast: \"Clear, with a low around 40. Southwest wind around 7 mph.\"\n    }, {\n      startTime: \"2022-03-15T07:00:00-03:00\",\n      endTime: \"2022-03-15T19:00:00-03:00\",\n      isDaytime: true,\n      temperature: \"67째F\",\n      temperatureTrend: null,\n      windSpeed: \"6 mph\",\n      windDirection: \"SW\",\n      icon: \"https://api.weather.gov/icons/land/day/sct?size=medium\",\n      shortForecast: \"Mostly Sunny\",\n      detailedForecast: \"Mostly sunny, with a high near 67. Southwest wind around 6 mph.\"\n    }]\n  });\n  const [error, setError] = useState();\n  const streetRef = useRef();\n  const cityRef = useRef();\n  const stateRef = useRef();\n  const zipcodeRef = useRef();\n\n  function handleOnClick() {\n    const street = streetRef.current.value;\n    const city = cityRef.current.value;\n    const state = stateRef.current.value;\n    const zipcode = zipcodeRef.current.value;\n    console.log(city);\n    GetForecastList(street, city, state, zipcode, setforecastResponse, setError);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Street\",\n      variant: \"outlined\",\n      size: \"small\",\n      ref: streetRef,\n      type: \"text\",\n      class: \"text-fieldmf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"City\",\n      variant: \"outlined\",\n      size: \"small\",\n      ref: cityRef,\n      type: \"text\",\n      margin: \"dense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"State\",\n      variant: \"outlined\",\n      size: \"small\",\n      ref: stateRef,\n      type: \"text\",\n      margin: \"dense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Zipcode\",\n      variant: \"outlined\",\n      size: \"small\",\n      ref: zipcodeRef,\n      type: \"text\",\n      margin: \"dense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleOnClick,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), forecastResponse && forecastResponse.periods.map((forecast, index) => {\n      return /*#__PURE__*/_jsxDEV(ForecastCard, {\n        forecast: forecast\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true);\n}\n\n_s(Forecast, \"lLyWWJuihJFEVP8k/48sO2xwqUQ=\");\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["C:/technical-test-react/upstart-web/src/Forecast.js"],"names":["React","useState","useRef","ForecastCard","GetForecastList","Button","TextField","Forecast","forecastResponse","setforecastResponse","generatedAt","periods","startTime","endTime","isDaytime","temperature","temperatureTrend","windSpeed","windDirection","icon","shortForecast","detailedForecast","error","setError","streetRef","cityRef","stateRef","zipcodeRef","handleOnClick","street","current","value","city","state","zipcode","console","log","map","forecast","index"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport ForecastCard from \"./components/ForecastCard\";\r\nimport GetForecastList from \"./services/ForecastService\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport './css/forecast-form.css'\r\n\r\nexport default function Forecast() {\r\n  const [forecastResponse, setforecastResponse] = useState({\r\n    generatedAt: \"2022-03-15T02:33:12-03:00\",\r\n    periods: [\r\n      {\r\n        startTime: \"2022-03-15T02:00:00-03:00\",\r\n        endTime: \"2022-03-15T07:00:00-03:00\",\r\n        isDaytime: false,\r\n        temperature: \"40째F\",\r\n        temperatureTrend: null,\r\n        windSpeed: \"7 mph\",\r\n        windDirection: \"SW\",\r\n        icon: \"https://api.weather.gov/icons/land/night/skc?size=medium\",\r\n        shortForecast: \"Clear\",\r\n        detailedForecast:\r\n          \"Clear, with a low around 40. Southwest wind around 7 mph.\",\r\n      },\r\n      {\r\n        startTime: \"2022-03-15T07:00:00-03:00\",\r\n        endTime: \"2022-03-15T19:00:00-03:00\",\r\n        isDaytime: true,\r\n        temperature: \"67째F\",\r\n        temperatureTrend: null,\r\n        windSpeed: \"6 mph\",\r\n        windDirection: \"SW\",\r\n        icon: \"https://api.weather.gov/icons/land/day/sct?size=medium\",\r\n        shortForecast: \"Mostly Sunny\",\r\n        detailedForecast:\r\n          \"Mostly sunny, with a high near 67. Southwest wind around 6 mph.\",\r\n      },\r\n    ],\r\n  });\r\n  const [error, setError] = useState();\r\n\r\n  const streetRef = useRef();\r\n  const cityRef = useRef();\r\n  const stateRef = useRef();\r\n  const zipcodeRef = useRef();\r\n\r\n  function handleOnClick() {\r\n    const street = streetRef.current.value;\r\n    const city = cityRef.current.value;\r\n    const state = stateRef.current.value;\r\n    const zipcode = zipcodeRef.current.value;\r\n    console.log(city);\r\n\r\n    GetForecastList(\r\n      street,\r\n      city,\r\n      state,\r\n      zipcode,\r\n      setforecastResponse,\r\n      setError\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Forecast</h1>\r\n      <TextField\r\n        label=\"Street\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        ref={streetRef}\r\n        type=\"text\"\r\n        class=\"text-fieldmf\"\r\n      />\r\n      <TextField\r\n        label=\"City\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        ref={cityRef}\r\n        type=\"text\"\r\n        margin=\"dense\"\r\n      />\r\n      <TextField\r\n        label=\"State\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        ref={stateRef}\r\n        type=\"text\"\r\n        margin=\"dense\"\r\n      />\r\n      <TextField\r\n        label=\"Zipcode\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        ref={zipcodeRef}\r\n        type=\"text\"\r\n        margin=\"dense\"\r\n      />\r\n      <Button variant=\"contained\" onClick={handleOnClick}>\r\n        Search\r\n      </Button>\r\n\r\n      {forecastResponse &&\r\n        forecastResponse.periods.map((forecast, index) => {\r\n          return <ForecastCard key={index} forecast={forecast} />;\r\n        })}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}