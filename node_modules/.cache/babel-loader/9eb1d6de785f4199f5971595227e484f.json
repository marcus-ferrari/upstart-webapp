{"ast":null,"code":"var _jsxFileName = \"C:\\\\technical-test-react\\\\upstart-web\\\\src\\\\Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport ForecastCard from \"./components/ForecastCard\";\nimport GetForecastList from \"./services/ForecastService\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport \"./css/forecast-form.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Forecast() {\n  _s();\n\n  const [forecastResponse, setforecastResponse] = useState();\n  const [error, setError] = useState();\n  const streetRef = useRef();\n  const cityRef = useRef();\n  const stateRef = useRef();\n  const zipcodeRef = useRef();\n\n  function handleOnClick() {\n    const street = streetRef.current.value;\n    const city = cityRef.current.value;\n    const state = stateRef.current.value;\n    const zipcode = zipcodeRef.current.value;\n    console.log(city);\n    GetForecastList(street, city, state, zipcode, setforecastResponse, setError);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Street\",\n      variant: \"outlined\",\n      size: \"small\",\n      inputRef: streetRef,\n      type: \"text\",\n      className: \"text-field\",\n      id: \"street-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"City\",\n      variant: \"outlined\",\n      size: \"small\",\n      inputRef: cityRef,\n      type: \"text\",\n      className: \"text-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"State\",\n      variant: \"outlined\",\n      size: \"small\",\n      inputRef: stateRef,\n      type: \"text\",\n      className: \"text-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Zipcode\",\n      variant: \"outlined\",\n      size: \"small\",\n      inputRef: zipcodeRef,\n      type: \"text\",\n      className: \"text-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleOnClick,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), forecastResponse && forecastResponse.periods.map((forecast, index) => {\n      return /*#__PURE__*/_jsxDEV(ForecastCard, {\n        forecast: forecast\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 18\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error != null && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Forecast, \"4wjTsw37gyVZxSnbpzCrADzk7iw=\");\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["C:/technical-test-react/upstart-web/src/Forecast.js"],"names":["React","useState","useRef","ForecastCard","GetForecastList","Button","TextField","Forecast","forecastResponse","setforecastResponse","error","setError","streetRef","cityRef","stateRef","zipcodeRef","handleOnClick","street","current","value","city","state","zipcode","console","log","periods","map","forecast","index"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport ForecastCard from \"./components/ForecastCard\";\r\nimport GetForecastList from \"./services/ForecastService\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport \"./css/forecast-form.css\";\r\n\r\nexport default function Forecast() {\r\n  const [forecastResponse, setforecastResponse] = useState();\r\n  const [error, setError] = useState();\r\n\r\n  const streetRef = useRef();\r\n  const cityRef = useRef();\r\n  const stateRef = useRef();\r\n  const zipcodeRef = useRef();\r\n\r\n  function handleOnClick() {\r\n    const street = streetRef.current.value;\r\n    const city = cityRef.current.value;\r\n    const state = stateRef.current.value;\r\n    const zipcode = zipcodeRef.current.value;\r\n    console.log(city);\r\n\r\n    GetForecastList(\r\n      street,\r\n      city,\r\n      state,\r\n      zipcode,\r\n      setforecastResponse,\r\n      setError\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Forecast</h1>\r\n      <TextField\r\n        label=\"Street\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        inputRef={streetRef}\r\n        type=\"text\"\r\n        className=\"text-field\"\r\n        id=\"street-field\"\r\n      />\r\n      <TextField\r\n        label=\"City\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        inputRef={cityRef}\r\n        type=\"text\"\r\n        className=\"text-field\"\r\n      />\r\n      <TextField\r\n        label=\"State\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        inputRef={stateRef}\r\n        type=\"text\"\r\n        className=\"text-field\"\r\n      />\r\n      <TextField\r\n        label=\"Zipcode\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        inputRef={zipcodeRef}\r\n        type=\"text\"\r\n        className=\"text-field\"\r\n      />\r\n      <Button variant=\"contained\" onClick={handleOnClick}>\r\n        Search\r\n      </Button>\r\n\r\n      {forecastResponse &&\r\n        forecastResponse.periods.map((forecast, index) => {\r\n          return <ForecastCard key={index} forecast={forecast} />;\r\n        })}\r\n\r\n      <div>{error != null && <h1>{error}</h1>}</div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}